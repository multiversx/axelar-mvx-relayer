openapi: 3.0.3
info:
  title: Amplifier GMP API
  description: Integration layer for Amplifier chains
  version: 1.0.0
paths:
  /health:
    get:
      summary: Health check
      operationId: healthCheck
      responses:
        '200':
          description: OK
  /contracts/{wasmContractAddress}/broadcasts:
    post:
      summary: Broadcast arbitrary MsgExecuteContract transaction
      operationId: broadcastMsgExecuteContract
      parameters:
        - $ref: '#/components/parameters/wasmContractAddress'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /contracts/{wasmContractAddress}/broadcasts/{broadcastID}:
    get:
      summary: Get broadcast status
      operationId: getMsgExecuteContractBroadcastStatus
      parameters:
        - $ref: '#/components/parameters/wasmContractAddress'
        - $ref: '#/components/parameters/broadcastID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastStatusResponse'
        '404':
          description: Broadcast Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chains/{chain}/events:
    post:
      summary: Publish on-chain events
      operationID: publishEvents
      parameters:
        - $ref: '#/components/parameters/chain'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishEventsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishEventsResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Chain Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chains/{chain}/tasks:
    get:
      summary: Poll transaction to be executed on chain
      operationId: getTasks
      parameters:
        - $ref: '#/components/parameters/chain'
        - $ref: '#/components/parameters/after'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTasksResult'
        '404':
          description: Chain Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  parameters:
    chain:
      name: chain
      in: path
      required: true
      schema:
        type: string
      example: "ethereum"
    after:
      name: after
      in: query
      required: false
      schema:
        type: string
        x-go-type: uuid.UUID
        x-go-type-import:
          path: github.com/google/uuid
          name: uuid
      example: "deadbeef-dead-beef-dead-beefdeadbeef"
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 20
      example: 10
    wasmContractAddress:
      name: wasmContractAddress
      in: path
      required: true
      schema:
        type: string
        pattern: '^axelar1[acdefghjklmnpqrstuvwxyz023456789]{58}$'
      example: "axelar16mek8sdcsq78jltfue35zhm5ds0cxpl0dfnrel8kck3jwtecdtnqcejdav"
    broadcastID:
      name: broadcastID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/BroadcastID'
      example: "deadbeef-dead-beef-dead-beefdeadbeef"
  schemas:
    PublishEventsRequest:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
          minItems: 1
          maxItems: 100
      required:
        - events
    EventType:
      type: string
      enum:
        - GAS_CREDIT
        - GAS_REFUNDED
        - CALL
        - MESSAGE_APPROVED
        - MESSAGE_EXECUTED
        - CANNOT_EXECUTE_MESSAGE
        - SIGNERS_ROTATED
      x-enum-varnames:
        - EventTypeGasCredit
        - EventTypeGasRefunded
        - EventTypeCall
        - EventTypeMessageApproved
        - EventTypeMessageExecuted
        - EventTypeCannotExecuteMessage
        - EventTypeSignersRotated
    EventMetadata:
      type: object
      properties:
        txID:
          type: string
          nullable: true
          x-omitempty: true
          minLength: 1
        timestamp:
          type: string
          format: date-time
        fromAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
          nullable: true
          x-omitempty: true
        finalized:
          type: boolean
          nullable: true
          x-omitempty: true
          default: true
    CallEventMetadata:
      allOf:
        - $ref: '#/components/schemas/EventMetadata'
        - properties:
            parentMessageID:
              type: string
              nullable: true
              x-omitempty: true
              minLength: 1
    MessageApprovedEventMetadata:
      allOf:
        - $ref: '#/components/schemas/EventMetadata'
        - properties:
            commandID:
              type: string
              nullable: true
              x-omitempty: true
              # TODO: use exact length
              minLength: 1
    MessageExecutedEventMetadata:
      allOf:
        - $ref: '#/components/schemas/EventMetadata'
        - properties:
            commandID:
              type: string
              nullable: true
              x-omitempty: true
              # TODO: use exact length
              minLength: 1
            childMessageIDs:
              type: array
              nullable: true
              x-omitempty: true
              items:
                type: string
                minLength: 1
    CannotExecuteMessageEventMetadata:
      type: object
      properties:
        fromAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
          nullable: true
          x-omitempty: true
        timestamp:
          type: string
          format: date-time
    CannotExecuteMessageEventV2Metadata:
      type: object
      properties:
        fromAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
          nullable: true
          x-omitempty: true
        timestamp:
          type: string
          format: date-time
        taskItemID:
          $ref: '#/components/schemas/TaskItemID'
    SignersRotatedEventMetadata:
      allOf:
        - $ref: '#/components/schemas/EventMetadata'
        - properties:
            signersHash:
              type: string
              format: byte
              minLength: 1
            epoch:
              type: integer
              format: int64
              minimum: 0
    Event:
      oneOf:
        - $ref: '#/components/schemas/GasCreditEvent'
        - $ref: '#/components/schemas/GasRefundedEvent'
        - $ref: '#/components/schemas/CallEvent'
        - $ref: '#/components/schemas/MessageApprovedEvent'
        - $ref: '#/components/schemas/MessageExecutedEvent'
        - $ref: '#/components/schemas/CannotExecuteMessageEvent'
        - $ref: '#/components/schemas/CannotExecuteMessageEventV2'
        - $ref: '#/components/schemas/SignersRotatedEvent'
      discriminator:
        propertyName: type
        mapping:
          GAS_CREDIT: '#/components/schemas/GasCreditEvent'
          GAS_REFUNDED: '#/components/schemas/GasRefundedEvent'
          CALL: '#/components/schemas/CallEvent'
          MESSAGE_APPROVED: '#/components/schemas/MessageApprovedEvent'
          MESSAGE_EXECUTED: '#/components/schemas/MessageExecutedEvent'
          CANNOT_EXECUTE_MESSAGE: '#/components/schemas/CannotExecuteMessageEvent'
          CANNOT_EXECUTE_MESSAGE/V2: '#/components/schemas/CannotExecuteMessageEventV2'
          SIGNERS_ROTATED: '#/components/schemas/SignersRotatedEvent'
      properties:
        type:
          $ref: '#/components/schemas/EventType'
      required:
        - type
    EventBase:
      type: object
      properties:
        eventID:
          type: string
          minLength: 1
        meta:
          allOf:
            - $ref: '#/components/schemas/EventMetadata'
          nullable: true
          x-omitempty: true
      required:
        - eventID
    GasCreditEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/EventBase'
        - properties:
            messageID:
              type: string
              minLength: 1
            refundAddress:
              $ref: '#/components/schemas/Address'
            payment:
              $ref: '#/components/schemas/Token'
          required:
            - messageID
            - refundAddress
            - payment
    GasRefundedEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/EventBase'
        - properties:
            messageID:
              type: string
              minLength: 1
            recipientAddress:
              $ref: '#/components/schemas/Address'
            refundedAmount:
              $ref: '#/components/schemas/Token'
            cost:
              $ref: '#/components/schemas/Token'
          required:
            - messageID
            - recipientAddress
            - refundedAmount
            - cost
    CallEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/EventBase'
        - properties:
            meta:
              allOf:
                - $ref: '#/components/schemas/CallEventMetadata'
              nullable: true
              x-omitempty: true
        - properties:
            message:
              $ref: "#/components/schemas/GatewayV2Message"
            destinationChain:
              type: string
              minLength: 1
            payload:
              type: string
              format: byte
            withToken:
              $ref: '#/components/schemas/Token'
          required:
            - message
            - destinationChain
            - payload
    MessageApprovedEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/EventBase'
        - properties:
            meta:
              allOf:
                - $ref: '#/components/schemas/MessageApprovedEventMetadata'
              nullable: true
              x-omitempty: true
        - properties:
            message:
              $ref: '#/components/schemas/GatewayV2Message'
            cost:
              $ref: '#/components/schemas/Token'
          required:
            - message
            - cost
    MessageExecutedEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/EventBase'
        - properties:
            meta:
              allOf:
                - $ref: '#/components/schemas/MessageExecutedEventMetadata'
              nullable: true
              x-omitempty: true
        - properties:
            messageID:
              type: string
              minLength: 1
            sourceChain:
              type: string
              minLength: 1
            status:
              $ref: '#/components/schemas/MessageExecutionStatus'
            cost:
              $ref: '#/components/schemas/Token'
          required:
            - messageID
            - sourceChain
            - status
            - cost
    MessageExecutionStatus:
      type: string
      enum:
        - SUCCESSFUL
        - REVERTED
      x-enum-varnames:
        - MessageExecutionStatusSuccessful
        - MessageExecutionStatusReverted
    CannotExecuteMessageEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/EventBase'
        - properties:
            meta:
              allOf:
                - $ref: '#/components/schemas/CannotExecuteMessageEventMetadata'
              nullable: true
              x-omitempty: true
        - properties:
            taskItemID:
              $ref: '#/components/schemas/TaskItemID'
            reason:
              $ref: '#/components/schemas/CannotExecuteMessageReason'
            details:
              type: string
              minLength: 1
          required:
            - taskItemID
            - reason
            - details
    CannotExecuteMessageEventV2:
      type: object
      allOf:
        - $ref: '#/components/schemas/EventBase'
        - properties:
            meta:
              allOf:
                - $ref: '#/components/schemas/CannotExecuteMessageEventV2Metadata'
              nullable: true
              x-omitempty: true
        - properties:
            messageID:
              type: string
              minLength: 1
            sourceChain:
              type: string
              minLength: 1
            reason:
              $ref: '#/components/schemas/CannotExecuteMessageReason'
            details:
              type: string
              minLength: 1
          required:
            - messageID
            - sourceChain
            - reason
            - details
    CannotExecuteMessageReason:
      type: string
      enum:
        - INSUFFICIENT_GAS
        - ERROR
      x-enum-varnames:
        - CannotExecuteMessageReasonInsufficientGas
        - CannotExecuteMessageReasonError
    SignersRotatedEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/EventBase'
        - properties:
            meta:
              allOf:
                - $ref: '#/components/schemas/SignersRotatedEventMetadata'
              nullable: true
              x-omitempty: true
        - properties:
            messageID:
              type: string
              minLength: 1
          required:
            - messageID
    GatewayV2Message:
      type: object
      properties:
        messageID:
          type: string
          minLength: 1
        sourceChain:
          type: string
          minLength: 1
        sourceAddress:
          $ref: '#/components/schemas/Address'
        destinationAddress:
          $ref: '#/components/schemas/Address'
        payloadHash:
          type: string
          format: byte
          minLength: 1
      required:
        - messageID
        - sourceChain
        - sourceAddress
        - destinationAddress
        - payloadHash
    Token:
      type: object
      properties:
        tokenID:
          type: string
          nullable: true
          x-omitempty: true
          minLength: 1
        amount:
          $ref: '#/components/schemas/BigInt'
      required:
        - amount
    PublishEventsResult:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/PublishEventResultItem'
      required:
        - results
    PublishEventResultItem:
      oneOf:
        - $ref: '#/components/schemas/PublishEventAcceptedResult'
        - $ref: '#/components/schemas/PublishEventErrorResult'
      discriminator:
        propertyName: status
        mapping:
          ACCEPTED: '#/components/schemas/PublishEventAcceptedResult'
          ERROR: '#/components/schemas/PublishEventErrorResult'
    PublishEventStatus:
      type: string
      enum:
        - ACCEPTED
        - ERROR
      x-enum-varnames:
        - PublishEventStatusAccepted
        - PublishEventStatusError
    PublishEventResultItemBase:
      properties:
        status:
          $ref: '#/components/schemas/PublishEventStatus'
        index:
          type: integer
          minimum: 0
      required:
        - status
        - index
    PublishEventAcceptedResult:
      allOf:
        - $ref: '#/components/schemas/PublishEventResultItemBase'
        - properties: {}
    PublishEventErrorResult:
      allOf:
        - $ref: '#/components/schemas/PublishEventResultItemBase'
        - properties:
            error:
              type: string
              minLength: 1
            retriable:
              type: boolean
          required:
            - error
            - retriable
    GetTasksResult:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskItem'
      required:
        - tasks
    TaskType:
      type: string
      enum:
        - VERIFY
        - GATEWAY_TX
        - EXECUTE
        - REFUND
      x-enum-varnames:
        - TaskTypeVerify
        - TaskTypeGatewayTransaction
        - TaskTypeExecute
        - TaskTypeRefund
    TaskItem:
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/TaskItemID'
          x-go-name: ID
        chain:
          type: string
          minLength: 1
        timestamp:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/TaskType'
        task:
          $ref: '#/components/schemas/Task'
      required:
        - id
        - chain
        - timestamp
        - type
        - task
    TaskItemID:
      type: string
      minLength: 1
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/google/uuid
        name: uuid
    Task:
      oneOf:
        - $ref: '#/components/schemas/VerifyTask'
        - $ref: '#/components/schemas/GatewayTransactionTask'
        - $ref: '#/components/schemas/ExecuteTask'
        - $ref: '#/components/schemas/RefundTask'
    RefundTask:
      properties:
        message:
          $ref: "#/components/schemas/GatewayV2Message"
        refundRecipientAddress:
          $ref: '#/components/schemas/Address'
        remainingGasBalance:
          $ref: "#/components/schemas/Token"
      required:
        - message
        - refundRecipientAddress
        - remainingGasBalance
    GatewayTransactionTask:
      properties:
        executeData:
          type: string
          format: byte
          minLength: 1
      required:
        - executeData
    VerifyTask:
      properties:
        message:
          $ref: "#/components/schemas/GatewayV2Message"
        payload:
          type: string
          format: byte
          minLength: 1
      required:
        - message
        - payload
    ExecuteTask:
      properties:
        message:
          $ref: "#/components/schemas/GatewayV2Message"
        payload:
          type: string
          format: byte
          minLength: 1
        availableGasBalance:
          $ref: "#/components/schemas/Token"
      required:
        - message
        - payload
        - availableGasBalance
    BroadcastRequest:
      type: object
      additionalProperties: {}
    BroadcastResponse:
      type: object
      properties:
        broadcastID:
          $ref: "#/components/schemas/BroadcastID"
      required:
        - broadcastID
    BroadcastStatusResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/BroadcastStatus'
        receivedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        txEvents:
          type: array
          x-omitempty: true
          items:
            $ref: '#/components/schemas/BroadcastTxEvent'
        txHash:
          type: string
          nullable: true
          x-omitempty: true
          minLength: 1
        error:
          type: string
          nullable: true
          x-omitempty: true
          minLength: 1
      required:
        - receivedAt
        - status
    BroadcastTxEvent:
      type: object
      properties:
        type:
          type: string
          minLength: 1
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/BroadcastTxEventAttribute'
      required:
        - type
        - attributes
    BroadcastTxEventAttribute:
      type: object
      properties:
        key:
          type: string
          minLength: 1
        value:
          type: string
          minLength: 1
      required:
        - key
        - value
    BroadcastStatus:
      type: string
      enum:
        - RECEIVED
        - SUCCESS
        - ERROR
      x-enum-varnames:
        - BroadcastStatusReceived
        - BroadcastStatusSuccess
        - BroadcastStatusError
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          minLength: 1
        requestID:
          type: string
          minLength: 1
      required:
        - error
    BroadcastID:
      type: string
      minLength: 1
      x-go-type: uuid.UUID
      x-go-type-import:
        path: github.com/google/uuid
        name: uuid
    Address:
      type: string
      minLength: 1
    BigInt:
      type: string
      pattern: '^(0|[1-9]\d*)$'
